name: Run tests and create reports and badges

on:
  # Runs on pushes targeting any branch other than "pages"
  push:
    branches-ignore: ["pages"]

env:
  PAGES_BRANCH: pages

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Setups python 3.7
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
        cache: 'pip'
        cache-dependency-path: '**/requirements*.txt'

    # Install unit tests dependencies
    - name: Install dependencies
      run: |
        python --version
        pip --version
        echo Instalando dependencias
        cd app
        python -m pip install -r requirements.txt
        pip install pytest
        pip install pytest-cov
        pip install pytest-html
        pip install requests
        pip install unittest-xml-reporting

    # Cleanup previous reports if any
    - name: Delete previous report
      run: |
        rm -rf html_reports

    # Generates coverage report
    - name: Generate coverage report
      continue-on-error: true
      run: |
        if python -m pytest ./app/tests --cov-report html:html_reports/code_coverage --cov-report xml:html_reports/code_coverage/cov.xml --cov=./app/calculadora -vv; then
          rm html_reports/code_coverage/.gitignore
          echo "enriquecendo relatório de cobertura com output do pytest"
          echo "<hr><pre style='font-size: small; padding: 1em'>" >> html_reports/code_coverage/index.html
          python -m pytest ./app/tests --cov-report term-missing --cov=./app/calculadora -vv >> html_reports/code_coverage/index.html
          echo "</pre>" >> html_reports/code_coverage/index.html
        else
          echo "testes unitários falharam"
        fi

    # Adds unit test run badge
    - name: Add unit test run badge
      run: |
        mkdir -p html_reports/badges
        if python -m pytest ./app/tests > /dev/null; then
            python ./.github/workflows/scripts/create_badge.py --text unit-tests --value passing --color green --file_name ./html_reports/badges/unit_tests_run_badge.svg
        else
            python ./.github/workflows/scripts/create_badge.py --text unit-tests --value not-passing --color red --file_name ./html_reports/badges/unit_tests_run_badge.svg
        fi

    # Adds unit test coverage badge
    - name: Add unit test coverage badge
      run: |
        mkdir -p html_reports/badges
        python ./.github/workflows/scripts/create_badge.py --text coverage --value `python .github/workflows/scripts/get_coverage.py` --color orange --file_name ./html_reports/badges/unit_tests_coverage_badge.svg

    # Creates unit tests run xml
    - name: Create unit tests run xml
      continue-on-error: true
      run: |
        cd app
        mkdir -p code_coverage
        python -m xmlrunner --output-file "code_coverage/unit_test.xml"
        cd ..
        ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
        mv app/code_coverage html_reports

    # Adds unit test summary badge
    - name: Add unit test summary badge
      run: |
        ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
        mkdir -p html_reports/badges
        python ./.github/workflows/scripts/create_badge.py --text unit-tests-summary --value "`python .github/workflows/scripts/unit_test_summary.py`" --color white --file_name ./html_reports/badges/unit_tests_summary_badge.svg

    # Install mutation tests dependencies
    - name: Install mutation tests dependencies
      run: |
        python --version
        pip --version
        echo Instalando dependencias
        cd app
        python -m pip install -r requirements.txt
        pip install mutmut
        pip install junit2html
        pip install requests

    # Run mutation tests
    - name: Run mutation tests
      continue-on-error: true
      run: |
        echo iniciando testes
        if python -m mutmut run --paths-to-mutate app/calculadora --tests-dir app/tests --simple-output; then
          echo sucesso
        else
          echo erro
        fi
        echo fim

    # Generates mutation tests report
    - name: Generate mutation tests report
      continue-on-error: true
      run: |
        echo gerando report html
        python -m mutmut html
        rm -rf html_reports/mutmut
        mkdir -p html_reports/mutmut
        mv html html_reports/mutmut
        echo gerando report xml
        python -m mutmut junitxml > html_reports/mutmut/mutmut-results.xml
        rm .mutmut-cache
        echo finalizando relatorio

    # Add mutation tests summary badge
    - name: Add mutation tests summary badge
      continue-on-error: true
      run: |
        mkdir -p html_reports/badges
        python ./.github/workflows/scripts/create_badge.py --text mutmut-summary --value "`python .github/workflows/scripts/mutmut_summary.py`" --color black --file_name ./html_reports/badges/mutmut_summary_badge.svg

    # Add mutation tests score badge
    - name: Add mutation tests score badge
      continue-on-error: true
      run: |
        if python .github/workflows/scripts/mutmut_score.py > /dev/null; then
            python ./.github/workflows/scripts/create_badge.py --text mutmut-score --value `python .github/workflows/scripts/mutmut_score.py` --color blue --file_name ./html_reports/badges/mutmut_score_badge.svg
        else
            python ./.github/workflows/scripts/create_badge.py --text mutmut-score --value error --color blue --file_name ./html_reports/badges/mutmut_score_badge.svg
        fi

    # Deploy reports and badges to pages branch
    - name: Deploy
      uses: s0/git-publish-subdir-action@develop
      env:
        REPO: self
        BRANCH: ${{ env.PAGES_BRANCH }}
        FOLDER: html_reports
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TARGET_DIR: ${{ github.REF_NAME }}